{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Go implementation of Polkadot/Substrate compatible runtimes</p> <p>The following project is based on previous research, funded by Web3 Foundation Grants, and developed and maintained by LimeChain . The research provides conclusions if Go is a suitable choice for writing Polkadot Runtimes and further aids the development of a Go toolchain, capable of producing compatible runtimes.</p> <p>While there are several implementations of Polkadot Hosts in Rust, C++, and Go, the only option for writing Polkadot Runtimes is in Rust. Writing Polkadot Runtimes in Go is exciting, mainly because of Go's simplicity and automatic memory management. It is a modern, powerful, and fast language, backed by Google and used in many of their software, thus making it an ideal candidate for implementing Polkadot Runtimes.</p>"},{"location":"development/build/","title":"Build","text":"<p>By utilizing our Toolchain, there are currently two options to choose from for the GC implementation. Modify the <code>GC</code> environment variable to switch between them.</p>"},{"location":"development/build/#extalloc-gc","title":"Extalloc GC","text":"<p>It works with the host's external allocator as per specification.</p> <pre><code>make build\n</code></pre>"},{"location":"development/build/#conservative-gc","title":"Conservative GC","text":"<p>It is used only for development and testing and works by using a different heap base offset from the allocator's one (as a workaround), so the GC can use a separate heap region for its allocations and not interfere with the allocator's region.</p> <pre><code>GC=\"conservative\" make build\n</code></pre>"},{"location":"development/file-structure/","title":"File structure","text":"<ul> <li><code>build</code> - the output directory for the compiled Wasm file.</li> <li><code>config</code> - configuration of the used runtime modules (pallets).</li> <li><code>constants</code> - constants used in the runtime.</li> <li><code>env</code> - stubs for the host-provided functions.</li> <li><code>execution</code> - runtime execution logic.</li> <li><code>frame</code> - runtime modules (pallets).</li> <li><code>primitives</code> - runtime primitives.</li> <li><code>runtime</code> - runtime entry point and tests.</li> <li><code>utils</code> - utility functions.</li> <li><code>tinygo</code> - submodule for the TinyGo compiler, used for WASM compilation.</li> <li><code>goscale</code> - submodule for the SCALE codec.</li> <li><code>gossamer</code> - submodule for the Gossamer host, used during development and for running tests.</li> <li><code>substrate</code> - submodule for the Substrate host, used for running a network.</li> </ul>"},{"location":"development/inspect/","title":"Inspect","text":"<p>Install wasmer to get a simple view of the compiled WASM.</p> <pre><code>wasmer inspect build/runtime.wasm\n</code></pre> <pre><code>Type: wasm\nSize: 2.0 MB\nImports:\nFunctions:\n\"env\".\"ext_allocator_malloc_version_1\": [I32] -&gt; [I32]\n\"env\".\"ext_crypto_ed25519_generate_version_1\": [I32, I64] -&gt; [I32]\n\"env\".\"ext_crypto_ed25519_verify_version_1\": [I32, I64, I32] -&gt; [I32]\n\"env\".\"ext_crypto_sr25519_generate_version_1\": [I32, I64] -&gt; [I32]\n\"env\".\"ext_crypto_sr25519_verify_version_2\": [I32, I64, I32] -&gt; [I32]\n\"env\".\"ext_crypto_start_batch_verify_version_1\": [] -&gt; []\n\"env\".\"ext_crypto_finish_batch_verify_version_1\": [] -&gt; [I32]\n\"env\".\"ext_hashing_twox_128_version_1\": [I64] -&gt; [I32]\n\"env\".\"ext_hashing_twox_64_version_1\": [I64] -&gt; [I32]\n\"env\".\"ext_hashing_blake2_128_version_1\": [I64] -&gt; [I32]\n\"env\".\"ext_hashing_blake2_256_version_1\": [I64] -&gt; [I32]\n\"env\".\"ext_logging_log_version_1\": [I32, I64, I64] -&gt; []\n\"env\".\"ext_storage_append_version_1\": [I64, I64] -&gt; []\n\"env\".\"ext_storage_clear_version_1\": [I64] -&gt; []\n\"env\".\"ext_storage_clear_prefix_version_2\": [I64, I64] -&gt; [I64]\n\"env\".\"ext_storage_exists_version_1\": [I64] -&gt; [I32]\n\"env\".\"ext_storage_get_version_1\": [I64] -&gt; [I64]\n\"env\".\"ext_storage_start_transaction_version_1\": [] -&gt; []\n\"env\".\"ext_storage_rollback_transaction_version_1\": [] -&gt; []\n\"env\".\"ext_storage_commit_transaction_version_1\": [] -&gt; []\n\"env\".\"ext_storage_read_version_1\": [I64, I64, I32] -&gt; [I64]\n\"env\".\"ext_storage_root_version_2\": [I32] -&gt; [I64]\n\"env\".\"ext_storage_set_version_1\": [I64, I64] -&gt; []\n\"env\".\"ext_trie_blake2_256_ordered_root_version_2\": [I64, I32] -&gt; [I32]\nMemories:\n\"env\".\"memory\": not shared (20 pages..)\nTables:\nGlobals:\nExports:\nFunctions:\n\"Core_version\": [I32, I32] -&gt; [I64]\n\"Core_initialize_block\": [I32, I32] -&gt; [I64]\n\"Core_execute_block\": [I32, I32] -&gt; [I64]\n\"BlockBuilder_apply_extrinsic\": [I32, I32] -&gt; [I64]\n\"BlockBuilder_finalize_block\": [I32, I32] -&gt; [I64]\n\"BlockBuilder_inherent_extrinsics\": [I32, I32] -&gt; [I64]\n\"BlockBuilder_check_inherents\": [I32, I32] -&gt; [I64]\n\"TaggedTransactionQueue_validate_transaction\": [I32, I32] -&gt; [I64]\n\"AuraApi_slot_duration\": [I32, I32] -&gt; [I64]\n\"AuraApi_authorities\": [I32, I32] -&gt; [I64]\n\"AccountNonceApi_account_nonce\": [I32, I32] -&gt; [I64]\n\"TransactionPaymentApi_query_info\": [I32, I32] -&gt; [I64]\n\"TransactionPaymentApi_query_fee_details\": [I32, I32] -&gt; [I64]\n\"TransactionPaymentCallApi_query_call_info\": [I32, I32] -&gt; [I64]\n\"TransactionPaymentCallApi_query_call_fee_details\": [I32, I32] -&gt; [I64]\n\"Metadata_metadata\": [I32, I32] -&gt; [I64]\n\"SessionKeys_generate_session_keys\": [I32, I32] -&gt; [I64]\n\"SessionKeys_decode_session_keys\": [I32, I32] -&gt; [I64]\n\"GrandpaApi_grandpa_authorities\": [I32, I32] -&gt; [I64]\n\"OffchainWorkerApi_offchain_worker\": [I32, I32] -&gt; [I64]\nMemories:\nTables:\n\"__indirect_function_table\": FuncRef (60..60)\nGlobals:\n\"__heap_base\": I32 (constant)\n\"__data_end\": I32 (constant)\n</code></pre> <p>To inspect the WASM in more detail, and view the actual memory segments, you can install wabt.</p> <pre><code>wasm-objdump -x build/runtime.wasm\n</code></pre>"},{"location":"development/install/","title":"Install","text":"<p>Prerequisites</p> <ul> <li>Git</li> <li>Go 1.19+</li> <li>Docker</li> <li>Rust</li> </ul> <p>Clone the Gosemble repository.</p> <pre><code>git clone https://github.com/LimeChain/gosemble.git\ncd gosemble\n</code></pre> <p>Pull all necessary git submodules.</p> <pre><code>git submodule update --init --recursive\n</code></pre>"},{"location":"overview/modules/","title":"Modules","text":"<p>Currently supported:</p> <ul> <li>System - The most fundamental module that provides low-level types, storage, and functions which are essential for other modules.</li> <li>Timestamp - This module provides timestamp capabilities, which are required by many other pallets.</li> <li>Balances - This module manages token balances. It's crucial for any blockchain that supports a native currency.</li> <li>Aura - This module provides block production capabilities for the PoA consensus mechanism.</li> </ul>"},{"location":"overview/runtime-architecture/","title":"Runtime Architecture","text":"<p>At the time of writing, the official Go compiler is not Wasm compatible with the Polkadot/Substrate requirements. The proposed solution is based on an alternative Go compiler that aims at supporting Wasm runtimes compatible with Polkadot spec / Substrate that incorporates GC with external memory allocator targeting Wasm MVP.</p> <p></p>"},{"location":"overview/runtime-architecture/#webassembly-specification","title":"WebAssembly specification","text":"<p>It targets WebAssembly MVP without any extensions enabled, that offers limited set of features compared to WebAssembly 1.0. Adding on top of that, Polkadot/Substrate specifications for the Runtime module define very domain-specific API that consist of:</p> <ul> <li>imported Host provided functions for dealing with memory, storage, crypto, logging, etc.</li> <li>imported Host provided memory.</li> <li>exported linker specific globals (<code>__heap_base</code>, <code>__data_end</code>).</li> <li>exported <code>__indirect_function_table</code> (WIP and not enabled currently).</li> <li>exported business logic API functions (<code>Core_version</code>, <code>Core_execute_block</code>, <code>Core_initialize_block</code>, etc).</li> </ul> <p>Polkadot is a non-browser environment, but it is not an OS. It doesn't seek to provide access to an operating-system API like files, networking, or any other major part of the things provided by WASI (WebAssembly System Interface).</p>"},{"location":"overview/runtime-architecture/#scale-codec","title":"SCALE codec","text":"<p>Runtime data, coming in the form of byte code, needs to be as light as possible. The SCALE codec provides the capability of efficiently encoding and decoding it. Since it is built for little-endian systems, it is compatible with Wasm environments. The runtime works with custom-defined SCALE types compatible with TinyGo. At the boundary where it interacts with the host (memory, storage), those are converted to ordinary Go types.</p>"},{"location":"overview/runtime-architecture/#runtime-calls","title":"Runtime calls","text":"<p>Each function call into the Runtime is done with newly allocated memory (via the shared allocator), either for sharing input data or results. Arguments are SCALE encoded into a byte array and copied into this section of the Wasm shared memory. Allocations do not persist between calls. It is important to note that the Runtime uses the same Host provided allocator for all heap allocations, so the Host is in charge of the Wasm heap memory management. Data passing to the Runtime API is always SCALE encoded, Host API calls on the other hand try to avoid all encoding.</p>"},{"location":"overview/runtime-architecture/#gc-with-external-memory-allocator","title":"GC with external memory allocator","text":"<p>According to the Polkadot specification, the Wasm module does not include a memory allocator. It imports memory from the Host and relies on Host imported functions for all heap allocations. Since Go/TinyGo uses GC and manages its memory by itself, contrary to specification, a GC with external memory allocator is implemented in our TinyGo fork to meet the requirements of the Polkadot specification.</p> <p>The design in which allocation functions are on the Host side is dictated by the fact that some Host functions might return buffers of data of unknown size. That means that the Wasm code cannot efficiently provide buffers upfront.</p> <p>For example, let's examine the Host function that returns a given storage value. The storage value's size is not known upfront in the general case, so the Wasm caller cannot pre-allocate the buffer upfront. A potential solution is to first call the Host function without a buffer, which will return the value's size, and then do the second call passing a buffer of the required size. For some Host functions, caches could be put in place for mitigation, some other functions cannot be implemented in such model at all. To solve this problem, it was chosen to place the allocator on the Host side. However, this is not the only possible solution, as there is an ongoing discussion about moving the allocator into the Wasm: [1]. Notably, the allocator maintains some of its data structures inside the linear memory and some other structures outside.</p>"},{"location":"overview/runtime-architecture/#stack","title":"Stack","text":"<p>Since WebAssembly has no stack introspection to scan the roots, it requires to use mirrored shadow stack in the linear memory, pushed/popped along with the machine stack, thus making it less efficient. Also, the stack placement differs from the one compiled from Substrate/Rust, and it is placed before the data section.</p>"},{"location":"overview/runtime-architecture/#exported-globals","title":"Exported globals","text":"<p>It is expected from the Runtime to export <code>__heap_base</code> global indicating the beginning of the heap. It is used by the Host allocator to prevent memory allocations below that address and avoid clashes with the stack and data sections.</p>"},{"location":"overview/runtime-architecture/#imported-vs-exported-memory","title":"Imported vs exported memory","text":"<p>Imported memory works a little better than exported memory since it avoids some edge cases, although it also has some downsides. Working with exported memory is almost certainly still supported and in fact, this is how it worked in the beginning. However, the current spec describes that memory should be made available to the Polkadot Runtime for import under the symbol name <code>memory</code>.</p>"},{"location":"overview/runtime-architecture/#no-concurrency","title":"No concurrency","text":"<p>In Polkadot, concurrency is achieved through Parachains.</p>"},{"location":"overview/toolchain/","title":"Toolchain","text":"<p>Since we use a modified version of TinyGo for compiling Go to Wasm, some of Go's language capabilities cannot be applied due to the limited support in TinyGo which also affects some of the design decisions.</p>"},{"location":"reference/resources/","title":"Resources","text":""},{"location":"reference/resources/#polkadot","title":"Polkadot","text":"<ul> <li>General</li> <li>Wiki</li> <li>Specification</li> </ul>"},{"location":"reference/resources/#substrate","title":"Substrate","text":"<ul> <li>Docs</li> </ul>"},{"location":"reference/resources/#w3f","title":"W3F","text":"<ul> <li>Research</li> </ul>"},{"location":"reference/resources/#webassembly","title":"WebAssembly","text":"<ul> <li>Specification</li> </ul>"},{"location":"reference/resources/#go-tinygo","title":"Go / TinyGo","text":"<ul> <li>Go Docs</li> <li>TinyGo Docs</li> </ul>"},{"location":"test/debug/","title":"Debug","text":"<p>To aid the debugging process, there is a set of imported functions that can be called within the Runtime to log any message via the Host.</p> <pre><code>func Critical(message string) // logs and aborts the execution\nfunc Warn(message string)\nfunc Info(message string)\nfunc Debug(message string)\nfunc Trace(message string)\n</code></pre>"},{"location":"test/unit-test/","title":"Unit Test","text":"<p>After the Runtime is built, execute the tests with the help of Gossamer, which is used to import necessary Polkadot Host functionality and interact with the Runtime.</p> <pre><code>make test\n</code></pre> <p>or</p> <pre><code>make test_unit\nmake test_integration\n</code></pre>"},{"location":"tutorials/start-a-network/","title":"Start a Network","text":"<p>This tutorial provides a basic introduction how you can start a local network using Gosemble runtime, imported in Substrate node.</p>"},{"location":"tutorials/start-a-network/#before-you-begin","title":"Before you begin","text":"<p>Before you begin, verify that:</p> <ol> <li>You have installed all the repository dependencies.</li> <li>You have built your latest Gosemble runtime.</li> </ol>"},{"location":"tutorials/start-a-network/#build-and-start-the-network","title":"Build and start the network","text":"<ol> <li>Open a terminal shell on your machine.</li> <li>Change to the root directory to the locally cloned Gosemble repository.</li> <li>Execute the following command:</li> </ol> <pre><code>make start-network\n</code></pre> <p>This will build the Substrate node with the Gosemble runtime wasm blob and start a network with one node.</p> <p>Once the node is built, the terminal should display a similar output to this:</p> <pre><code>2023-04-20 09:00:47 Substrate Node    2023-04-20 09:00:47 \u270c\ufe0f  version 4.0.0-dev-765fd435549    2023-04-20 09:00:47 \u2764\ufe0f  by Substrate DevHub &lt;https://github.com/substrate-developer-hub&gt;, 2017-2023    2023-04-20 09:00:47 \ud83d\udccb Chain specification: Development    2023-04-20 09:00:47 \ud83c\udff7  Node name: real-approval-9498    2023-04-20 09:00:47 \ud83d\udc64 Role: AUTHORITY    2023-04-20 09:00:47 \ud83d\udcbe Database: RocksDb at /var/folders/4y/0ylpyqgn22g8jqpchzpm6lz80000gn/T/substrateBtT4Ur/chains/dev/db/full    2023-04-20 09:00:47 \u26d3  Native runtime: node-template-100 (node-template-1.tx1.au1)    2023-04-20 09:00:47 \ud83d\udd28 Initializing Genesis block/state (state: 0x8cac\u20262784, header-hash: 0x3cda\u2026df57)    2023-04-20 09:00:47 \ud83d\udc74 Loading GRANDPA authority set from genesis on what appears to be first startup.    2023-04-20 09:00:47 Using default protocol ID \"sup\" because none is configured in the chain specs    2023-04-20 09:00:47 \ud83c\udff7  Local node identity is: 12D3KooWKTKaG1R7DxRtTWGAJDAEXC91QgbvjuW2HoChuarvPVwB    2023-04-20 09:00:47 \ud83d\udcbb Operating system: macos    2023-04-20 09:00:47 \ud83d\udcbb CPU architecture: aarch64    2023-04-20 09:00:47 \ud83d\udce6 Highest known block at #0    \n2023-04-20 09:00:47 \u303d\ufe0f Prometheus exporter started at 127.0.0.1:9615    2023-04-20 09:00:47 Running JSON-RPC HTTP server: addr=127.0.0.1:9933, allowed origins=[\"*\"]    2023-04-20 09:00:47 Running JSON-RPC WS server: addr=127.0.0.1:9944, allowed origins=[\"*\"]    2023-04-20 09:00:48 \ud83d\ude4c Starting consensus session on top of parent 0x3cda151b8ad3c4f331710e99d76c93a6f1332fb6944274beb4942758f129df57    2023-04-20 09:00:48 \ud83c\udf81 Prepared block for proposing at 1 (0 ms) [hash: 0x78f54ecfb1c9429ab0fdf79e895fe5b384996759fbad7dd080e86793cb6dd171; parent_hash: 0x3cda\u2026df57; extrinsics (1): [0x47a9\u20265266]]    2023-04-20 09:00:48 \ud83d\udd16 Pre-sealed block for proposal at 1. Hash now 0x73b64c2e2ebb1e36f6ce3ceae1f30db4e85ec97541cfca38f688771661283911, previously 0x78f54ecfb1c9429ab0fdf79e895fe5b384996759fbad7dd080e86793cb6dd171.    2023-04-20 09:00:48 \u2728 Imported #1 (0x73b6\u20263911)    \n2023-04-20 09:00:50 \ud83d\ude4c Starting consensus session on top of parent 0x73b64c2e2ebb1e36f6ce3ceae1f30db4e85ec97541cfca38f688771661283911    2023-04-20 09:00:50 \ud83c\udf81 Prepared block for proposing at 2 (0 ms) [hash: 0x8297614e7b45dde043902a55c76410ad249bdde1a34d30593a0614b0e7c8743c; parent_hash: 0x73b6\u20263911; extrinsics (1): [0x56e4\u2026ec44]]    2023-04-20 09:00:50 \ud83d\udd16 Pre-sealed block for proposal at 2. Hash now 0x46590bceeaf9c797c37e940b97dc7c127dfef625c540f32d3298570cdf805af1, previously 0x8297614e7b45dde043902a55c76410ad249bdde1a34d30593a0614b0e7c8743c.    2023-04-20 09:00:50 \u2728 Imported #2 (0x4659\u20265af1)    \n2023-04-20 09:00:52 \ud83d\ude4c Starting consensus session on top of parent 0x46590bceeaf9c797c37e940b97dc7c127dfef625c540f32d3298570cdf805af1    2023-04-20 09:00:52 \ud83c\udf81 Prepared block for proposing at 3 (1 ms) [hash: 0xc068b2a5904b34a40aeb0ee0ff64469a3879974435f36859c074542f11cacbd2; parent_hash: 0x4659\u20265af1; extrinsics (1): [0x2fc1\u20261556]]    2023-04-20 09:00:52 \ud83d\udd16 Pre-sealed block for proposal at 3. Hash now 0x1f95f1d3b05ee47883cc56853029b9160f0aedf966adc874e7acc50f64a1af1f, previously 0xc068b2a5904b34a40aeb0ee0ff64469a3879974435f36859c074542f11cacbd2.    2023-04-20 09:00:52 \u2728 Imported #3 (0x1f95\u2026af1f)    \n2023-04-20 09:00:52 \ud83d\udca4 Idle (0 peers), best: #3 (0x1f95\u2026af1f), finalized #0 (0x3cda\u2026df57), \u2b07 0 \u2b06 0    \n2023-04-20 09:00:54 \ud83d\ude4c Starting consensus session on top of parent 0x1f95f1d3b05ee47883cc56853029b9160f0aedf966adc874e7acc50f64a1af1f    2023-04-20 09:00:54 \ud83c\udf81 Prepared block for proposing at 4 (1 ms) [hash: 0xccb05a3ba5b0122223aceea63fdf451137f431eda74d3d5be071d033c276ad64; parent_hash: 0x1f95\u2026af1f; extrinsics (1): [0x3933\u2026768d]]    2023-04-20 09:00:54 \ud83d\udd16 Pre-sealed block for proposal at 4. Hash now 0x499abfe622f7ba16ee2f84d93d14cfd53cfb67ad6520c2fe1d4e494feabcba08, previously 0xccb05a3ba5b0122223aceea63fdf451137f431eda74d3d5be071d033c276ad64.    2023-04-20 09:00:54 \u2728 Imported #4 (0x499a\u2026ba08)    \n2023-04-20 09:00:56 \ud83d\ude4c Starting consensus session on top of parent 0x499abfe622f7ba16ee2f84d93d14cfd53cfb67ad6520c2fe1d4e494feabcba08    2023-04-20 09:00:56 \ud83c\udf81 Prepared block for proposing at 5 (1 ms) [hash: 0x1c360a200207e096b0b94888b35ef125636b79b7199051eb1d10e536233c1c98; parent_hash: 0x499a\u2026ba08; extrinsics (1): [0xdfad\u2026dc49]]    2023-04-20 09:00:56 \ud83d\udd16 Pre-sealed block for proposal at 5. Hash now 0x48285138338a30e15d38ffe6d972ce295d89c32b20f393034f2aec448abf348c, previously 0x1c360a200207e096b0b94888b35ef125636b79b7199051eb1d10e536233c1c98.    2023-04-20 09:00:56 \u2728 Imported #5 (0x4828\u2026348c)    \n...\n...\n...\n...\n2023-04-20 09:01:07 \ud83d\udca4 Idle (0 peers), best: #10 (0xa1fe\u2026c156), finalized #7 (0x2361\u202627a8), \u2b07 0 \u2b06 0   \n</code></pre> <p>If the number of <code>finalized</code> blocks is increasing, this means your blockchain network is producing new blocks and successfully reaching consensus.</p>"},{"location":"tutorials/transfer-funds/","title":"Transfer funds","text":"<p>This tutorial provides steps on how to issue a transfer transaction to your local network.</p> <p>After you have started the local network, let's make a transfer through the  Polkadot/Substrate Portal.</p> <ol> <li>Open https://polkadot.js.org/apps/.</li> <li> <p>Click the Polkadot logo.</p> <p></p> </li> <li> <p>Switch to local network</p> <ol> <li>Scroll down to Development tab. </li> <li>Open the Development tab and select Local Node.</li> <li>Click Switch.</li> </ol> <p></p> </li> <li> <p>Local Network Explorer</p> <p>If your page is similar to the image below, you have successfully connected to your local node. New  recent blocks should appear every 2 seconds.</p> <p></p> </li> <li> <p>Create a transfer transaction</p> <p>Now that you have connected to your local network, let's issue a transfer transaction. The network has preconfigured  4 addresses to have small balances. Let's see the Accounts first.</p> <ol> <li> <p>Hover over Accounts and click Accounts.</p> <p></p> </li> <li> <p>Now you see the balances of all the accounts. Let's issue a transfer from Alice. Click Send.</p> <p></p> </li> <li> <p>Send Transfer</p> <p>The transfer window should pop up. Let's set the send to address to be someone who has 0 balance.</p> <ol> <li>From the addresses dropdown, select Charlie.</li> <li>Input the amount to be 10000000.</li> <li> <p>Click Make Transfer.</p> <p></p> </li> <li> <p>Sign and Submit the transfer.</p> <p></p> </li> <li> <p>Once you have submitted the transfer, a green checkmark should appear in the top-right corner of your browser  window.</p> <p></p> <p>If you get a red cross, instead of a green checkmark, this means that most likely the transfer has failed. To understand why the transfer has failed, find the transaction in the node explorer.</p> </li> </ol> </li> </ol> </li> <li> <p>Inspect the transaction</p> <p>Now that the transfer has been successful, let's inspect the transfer:</p> <p></p> <p>There are 3 events related to the transfer:</p> <ul> <li>First, the network has to create Charlie's account, because his balance was 0 before the transfer.</li> <li>Second, the actual transfer from Alice to Charlie.</li> <li>Last but not least, an event that showcases the transfer  transaction has been successful.</li> </ul> </li> </ol>"}]}
package main

import (
	"bytes"
	"math/big"
	"testing"

	gossamertypes "github.com/ChainSafe/gossamer/dot/types"
	"github.com/ChainSafe/gossamer/lib/common"
	"github.com/ChainSafe/gossamer/lib/runtime/wasmer"
	"github.com/ChainSafe/gossamer/lib/trie"
	"github.com/ChainSafe/gossamer/pkg/scale"
	sc "github.com/LimeChain/goscale"
	"github.com/LimeChain/gosemble/primitives/types"
	"github.com/stretchr/testify/assert"
)

func Test_ValidateTransaction(t *testing.T) {
	storage := trie.NewEmptyTrie()
	rt := wasmer.NewTestInstanceWithTrie(t, WASM_RUNTIME, storage)

	storageRoot := common.MustHexToHash("0x733cbee365f04eb93cd369eeaaf47bb94c1c98603944ba43c39b33070ae90880") // Depends on timestamp
	digest := gossamertypes.NewDigest()

	header := gossamertypes.NewHeader(parentHash, storageRoot, extrinsicsRoot, blockNumber, digest)
	encodedHeader, err := scale.Marshal(*header)
	assert.NoError(t, err)

	_, err = rt.Exec("Core_initialize_block", encodedHeader)
	assert.NoError(t, err)

	extra := newTestExtra(types.NewImmortalEra(), 0, 0)
	call := newTestCall(0, 0, 0xab, 0xcd)
	signer := newTestSigner()
	signature := newTestSignature("3594650a752f5b8a4853b66390ea2078b44725246d654ec94509ee2fa89916a74fa8d770f34b81b16adb08899ff223e4f61178e98c42c6a9bfefb987a4176208")
	tx := types.NewSignedUncheckedExtrinsic(call, signer, signature, extra)
	txSource := types.NewTransactionSource(types.External)
	blockHash := types.Blake2bHash{FixedSequence: sc.BytesToFixedSequenceU8(parentHash.ToBytes())}

	buffer := &bytes.Buffer{}
	txSource.Encode(buffer)
	tx.Encode(buffer)
	blockHash.Encode(buffer)

	encTransactionValidityResult, err := rt.Exec("TaggedTransactionQueue_validate_transaction", buffer.Bytes())
	assert.NoError(t, err)

	buffer.Reset()
	buffer.Write(encTransactionValidityResult)
	transactionValidityResult := types.DecodeTransactionValidityResult(buffer)

	assert.Equal(t, sc.Bool(true), transactionValidityResult.IsValidTransaction())
}

func Test_ValidateTransaction_NoUnsignedValidatorError(t *testing.T) {
	storage := trie.NewEmptyTrie()
	rt := wasmer.NewTestInstanceWithTrie(t, WASM_RUNTIME, storage)

	storageRoot := common.MustHexToHash("0x733cbee365f04eb93cd369eeaaf47bb94c1c98603944ba43c39b33070ae90880") // Depends on timestamp
	digest := gossamertypes.NewDigest()

	header := gossamertypes.NewHeader(parentHash, storageRoot, extrinsicsRoot, blockNumber, digest)
	encodedHeader, err := scale.Marshal(*header)
	assert.NoError(t, err)

	_, err = rt.Exec("Core_initialize_block", encodedHeader)
	assert.NoError(t, err)

	call := newTestCall(0, 65, 0xab, 0xcd) // non existing function
	tx := types.NewUnsignedUncheckedExtrinsic(call)
	txSource := types.NewTransactionSource(types.External)
	blockHash := types.Blake2bHash{FixedSequence: sc.BytesToFixedSequenceU8(parentHash.ToBytes())}

	buffer := &bytes.Buffer{}
	txSource.Encode(buffer)
	tx.Encode(buffer)
	blockHash.Encode(buffer)

	encTransactionValidityResult, err := rt.Exec("TaggedTransactionQueue_validate_transaction", buffer.Bytes())
	assert.NoError(t, err)

	buffer.Reset()
	buffer.Write(encTransactionValidityResult)
	transactionValidityResult := types.DecodeTransactionValidityResult(buffer)

	assert.Equal(t,
		types.NewTransactionValidityResult(
			types.NewTransactionValidityError(
				types.NewUnknownTransaction(types.NoUnsignedValidatorError),
			),
		),
		transactionValidityResult,
	)
}

func Test_ValidateTransaction_StaleError(t *testing.T) {
	storage := trie.NewEmptyTrie()
	rt := wasmer.NewTestInstanceWithTrie(t, WASM_RUNTIME, storage)

	pubKey1 := []byte{0x15, 0xb0, 0x7f, 0xe2, 0xe7, 0x81, 0x87, 0x4a, 0xd9, 0x7f, 0xbe, 0x3f, 0xcb, 0xf9, 0xab, 0xaf, 0x8e, 0x96, 0x5d, 0x2d, 0xb5, 0x30, 0xba, 0xb0, 0x89, 0xc1, 0xf3, 0xaa, 0x21, 0xf4, 0x20, 0x63}

	accountInfo := gossamertypes.AccountInfo{
		Nonce:       3,
		Consumers:   2,
		Producers:   3,
		Sufficients: 4,
		Data: gossamertypes.AccountData{
			Free:       scale.MustNewUint128(big.NewInt(5)),
			Reserved:   scale.MustNewUint128(big.NewInt(6)),
			MiscFrozen: scale.MustNewUint128(big.NewInt(7)),
			FreeFrozen: scale.MustNewUint128(big.NewInt(8)),
		},
	}

	hash, _ := common.Blake2b128(pubKey1)
	key := append(keySystemHash, keyAccountHash...)
	key = append(key, hash...)
	key = append(key, pubKey1...)

	bytesStorage, err := scale.Marshal(accountInfo)
	assert.NoError(t, err)

	err = storage.Put(key, bytesStorage)
	assert.NoError(t, err)

	storageRoot := common.MustHexToHash("0x733cbee365f04eb93cd369eeaaf47bb94c1c98603944ba43c39b33070ae90880") // Depends on timestamp
	digest := gossamertypes.NewDigest()

	header := gossamertypes.NewHeader(parentHash, storageRoot, extrinsicsRoot, blockNumber, digest)
	encodedHeader, err := scale.Marshal(*header)
	assert.NoError(t, err)

	_, err = rt.Exec("Core_initialize_block", encodedHeader)
	assert.NoError(t, err)

	extra := newTestExtra(types.NewImmortalEra(), 2, 0)
	call := newTestCall(0, 0, 0xab, 0xcd)
	signer := newTestSigner()
	signature := newTestSignature("952d69b3490588682fb93c9a277f13286d9dfd3db1fbf49b5d2c324e0ec096507858f06c80f0e1ae251c63bc53515f0d7ff2e1ac071b287803602f198ff9b801")
	tx := types.NewSignedUncheckedExtrinsic(call, signer, signature, extra)
	txSource := types.NewTransactionSource(types.External)
	blockHash := types.Blake2bHash{FixedSequence: sc.BytesToFixedSequenceU8(parentHash.ToBytes())}

	buffer := &bytes.Buffer{}
	txSource.Encode(buffer)
	tx.Encode(buffer)
	blockHash.Encode(buffer)

	encTransactionValidityResult, err := rt.Exec("TaggedTransactionQueue_validate_transaction", buffer.Bytes())
	assert.NoError(t, err)

	buffer.Reset()
	buffer.Write(encTransactionValidityResult)
	transactionValidityResult := types.DecodeTransactionValidityResult(buffer)

	assert.Equal(t,
		types.NewTransactionValidityResult(
			types.NewTransactionValidityError(
				types.NewInvalidTransaction(types.StaleError),
			),
		),
		transactionValidityResult,
	)
}

func Test_ValidateTransaction_ExhaustsResourcesError(t *testing.T) {
	storage := trie.NewEmptyTrie()
	rt := wasmer.NewTestInstanceWithTrie(t, WASM_RUNTIME, storage)

	storageRoot := common.MustHexToHash("0x733cbee365f04eb93cd369eeaaf47bb94c1c98603944ba43c39b33070ae90880") // Depends on timestamp
	digest := gossamertypes.NewDigest()

	header := gossamertypes.NewHeader(parentHash, storageRoot, extrinsicsRoot, blockNumber, digest)
	encodedHeader, err := scale.Marshal(*header)
	assert.NoError(t, err)

	_, err = rt.Exec("Core_initialize_block", encodedHeader)
	assert.NoError(t, err)

	call := newTestCall(0, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
	tx := types.NewUnsignedUncheckedExtrinsic(call)
	txSource := types.NewTransactionSource(types.External)
	blockHash := types.Blake2bHash{FixedSequence: sc.BytesToFixedSequenceU8(parentHash.ToBytes())}

	buffer := &bytes.Buffer{}
	txSource.Encode(buffer)
	tx.Encode(buffer)
	blockHash.Encode(buffer)

	encTransactionValidityResult, err := rt.Exec("TaggedTransactionQueue_validate_transaction", buffer.Bytes())
	assert.NoError(t, err)

	buffer.Reset()
	buffer.Write(encTransactionValidityResult)
	transactionValidityResult := types.DecodeTransactionValidityResult(buffer)

	assert.Equal(t,
		types.NewTransactionValidityResult(
			types.NewTransactionValidityError(
				types.NewInvalidTransaction(types.ExhaustsResourcesError),
			),
		),
		transactionValidityResult,
	)
}

func Test_ValidateTransaction_Era(t *testing.T) {
	storage := trie.NewEmptyTrie()
	rt := wasmer.NewTestInstanceWithTrie(t, WASM_RUNTIME, storage)

	setBlockNumber(t, storage, 16)

	extra := newTestExtra(types.NewMortalEra(16, 256), 0, 0)
	call := newTestCall(0, 0, 0xab, 0xcd)
	signer := newTestSigner()
	signature := newTestSignature("404f4a6036a798f9468899bcf8403ce4784b1396567b988681ce635110d9e58eebc56fdc843d1b066f705556377aec91bf8ed49766cb861f4edafdc38c4e4e00")

	tx := types.NewSignedUncheckedExtrinsic(call, signer, signature, extra)
	txSource := types.NewTransactionSource(types.External)
	blockHash := types.Blake2bHash{FixedSequence: sc.BytesToFixedSequenceU8(parentHash.ToBytes())}

	buffer := &bytes.Buffer{}
	txSource.Encode(buffer)
	tx.Encode(buffer)
	blockHash.Encode(buffer)

	encTransactionValidityResult, err := rt.Exec("TaggedTransactionQueue_validate_transaction", buffer.Bytes())
	assert.NoError(t, err)

	buffer.Reset()
	buffer.Write(encTransactionValidityResult)
	transactionValidityResult := types.DecodeTransactionValidityResult(buffer)

	assert.Equal(t, sc.Bool(true), transactionValidityResult.IsValidTransaction())
	assert.Equal(t, sc.U64(15), transactionValidityResult.AsValidTransaction().Longevity)
}

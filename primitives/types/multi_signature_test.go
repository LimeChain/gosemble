package types

import (
	"bytes"
	"testing"

	sc "github.com/LimeChain/goscale"
	"github.com/stretchr/testify/assert"
)

var (
	multiSignatureEd25519 = NewMultiSignatureEd25519(signatureEd25519)
	multiSignatureSr25519 = NewMultiSignatureSr25519(signatureSr25519)
	multiSignatureEcdsa   = NewMultiSignatureEcdsa(signatureEcdsa)
)

func Test_NewMultiSignatureEd25519(t *testing.T) {
	expect := MultiSignature{sc.NewVaryingData(MultiSignatureEd25519, signatureEd25519)}

	assert.Equal(t, expect, NewMultiSignatureEd25519(signatureEd25519))
}

func Test_NewMultiSignatureSr25519(t *testing.T) {
	expect := MultiSignature{sc.NewVaryingData(MultiSignatureSr25519, signatureSr25519)}

	assert.Equal(t, expect, NewMultiSignatureSr25519(signatureSr25519))
}

func Test_NewMultiSignatureEcdsa(t *testing.T) {
	expect := MultiSignature{sc.NewVaryingData(MultiSignatureEcdsa, signatureEcdsa)}

	assert.Equal(t, expect, NewMultiSignatureEcdsa(signatureEcdsa))
}

func Test_MultiSignature_Encode(t *testing.T) {
	var testExamples = []struct {
		label       string
		input       MultiSignature
		expectation []byte
	}{
		{
			label:       "Encode(MultiSignature(Ed25519))",
			input:       NewMultiSignatureEd25519(NewSignatureEd25519(sc.FixedSequence[sc.U8]{0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64}...)),
			expectation: []byte{0x00, 0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64},
		},
		{
			label:       "Encode(MultiSignature(Sr25519))",
			input:       NewMultiSignatureSr25519(NewSignatureSr25519(sc.FixedSequence[sc.U8]{0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64}...)),
			expectation: []byte{0x01, 0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64},
		},
		{
			label:       "Encode(MultiSignature(Ecdsa))",
			input:       NewMultiSignatureEcdsa(NewSignatureEcdsa(sc.FixedSequence[sc.U8]{0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64, 0x65}...)),
			expectation: []byte{0x02, 0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64, 0x65},
		},
	}

	for _, testExample := range testExamples {
		t.Run(testExample.label, func(t *testing.T) {
			buffer := &bytes.Buffer{}

			testExample.input.Encode(buffer)

			assert.Equal(t, testExample.expectation, buffer.Bytes())
		})
	}
}

func Test_DecodeMultiSignature(t *testing.T) {
	var testExamples = []struct {
		label       string
		input       []byte
		expectation MultiSignature
	}{
		{
			label:       "DecodeMultiSignature()",
			input:       []byte{0x00, 0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64},
			expectation: NewMultiSignatureEd25519(NewSignatureEd25519(sc.FixedSequence[sc.U8]{0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64}...)),
		},
		{
			label:       "DecodeMultiSignature()",
			input:       []byte{0x01, 0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64},
			expectation: NewMultiSignatureSr25519(NewSignatureSr25519(sc.FixedSequence[sc.U8]{0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64}...)),
		},
		{
			label:       "DecodeMultiSignature()",
			input:       []byte{0x02, 0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64, 0x65},
			expectation: NewMultiSignatureEcdsa(NewSignatureEcdsa(sc.FixedSequence[sc.U8]{0x00, 0x62, 0x37, 0x61, 0x33, 0x63, 0x31, 0x32, 0x64, 0x63, 0x30, 0x63, 0x38, 0x63, 0x37, 0x34, 0x38, 0x61, 0x62, 0x30, 0x37, 0x35, 0x32, 0x35, 0x62, 0x37, 0x30, 0x31, 0x31, 0x32, 0x32, 0x62, 0x38, 0x38, 0x62, 0x64, 0x37, 0x38, 0x66, 0x36, 0x30, 0x30, 0x63, 0x37, 0x36, 0x33, 0x34, 0x32, 0x64, 0x32, 0x37, 0x66, 0x32, 0x35, 0x65, 0x35, 0x66, 0x39, 0x32, 0x34, 0x34, 0x34, 0x63, 0x64, 0x65}...)),
		},
	}

	for _, testExample := range testExamples {
		t.Run(testExample.label, func(t *testing.T) {
			buffer := &bytes.Buffer{}
			buffer.Write(testExample.input)

			result, err := DecodeMultiSignature(buffer)
			assert.NoError(t, err)

			assert.Equal(t, testExample.expectation, result)
		})
	}
}

func Test_DecodeMultiSignature_Panics(t *testing.T) {
	buffer := &bytes.Buffer{}
	buffer.WriteByte(3)

	assert.PanicsWithValue(t, "invalid MultiSignature type in Decode: 3", func() {
		DecodeMultiSignature(buffer)
	})
}

func Test_MultiSignature_IsEd25519_True(t *testing.T) {
	assert.True(t, multiSignatureEd25519.IsEd25519())
}

func Test_MultiSignature_IsEd25519_False(t *testing.T) {
	assert.False(t, multiSignatureSr25519.IsEd25519())
	assert.False(t, multiSignatureEcdsa.IsEd25519())
}

func Test_MultiSignature_IsSr25519_True(t *testing.T) {
	assert.True(t, multiSignatureSr25519.IsSr25519())
}

func Test_MultiSignature_IsSr25519_False(t *testing.T) {
	assert.False(t, multiSignatureEd25519.IsSr25519())
	assert.False(t, multiSignatureEcdsa.IsSr25519())
}

func Test_MultiSignature_IsEcdsa_True(t *testing.T) {
	assert.True(t, multiSignatureEcdsa.IsEcdsa())
}

func Test_MultiSignature_IsEcdsa_False(t *testing.T) {
	assert.False(t, multiSignatureEd25519.IsEcdsa())
	assert.False(t, multiSignatureSr25519.IsEcdsa())
}

func Test_MultiSignature_AsEd25519(t *testing.T) {
	result := multiSignatureEd25519.AsEd25519()

	assert.Equal(t, signatureEd25519, result)
}

func Test_MultiSignature_AsEd25519_Panics(t *testing.T) {
	assert.PanicsWithValue(t, "not Ed25519 signature type", func() {
		multiSignatureEcdsa.AsEd25519()
	})
	assert.PanicsWithValue(t, "not Ed25519 signature type", func() {
		multiSignatureSr25519.AsEd25519()
	})
}

func Test_MultiSignature_AsSr25519(t *testing.T) {
	result := multiSignatureSr25519.AsSr25519()

	assert.Equal(t, signatureSr25519, result)
}

func Test_MultiSignature_AsSr25519_Panics(t *testing.T) {
	assert.PanicsWithValue(t, "not Sr25519 signature type", func() {
		multiSignatureEcdsa.AsSr25519()
	})
	assert.PanicsWithValue(t, "not Sr25519 signature type", func() {
		multiSignatureEd25519.AsSr25519()
	})
}

func Test_MultiSignature_AsEcdsa(t *testing.T) {
	result := multiSignatureEcdsa.AsEcdsa()

	assert.Equal(t, signatureEcdsa, result)
}

func Test_MultiSignature_AsEcdsa_Panics(t *testing.T) {
	assert.PanicsWithValue(t, "not Ecdsa signature type", func() {
		multiSignatureSr25519.AsEcdsa()
	})
	assert.PanicsWithValue(t, "not Ecdsa signature type", func() {
		multiSignatureEd25519.AsEcdsa()
	})
}
